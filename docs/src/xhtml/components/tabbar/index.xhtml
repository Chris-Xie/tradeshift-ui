<!DOCTYPE html>
<html>
	<head>
		<title>TabBar</title>
		<script src="tabs.js"></script>
		<style>
			.sticky {
				dislay: none !important; // at least until we've fixed the position when TabBar is before Main
			}
		</style>
	</head>
	<body>
		<header data-ts="TopBar"></header>
		<header data-ts="TabBar" id="mytabbar"></header>
		<main data-ts="Main">
			<article>
				<h1>TabBar</h1>
				<section>
					<p>Assign <att>data-ts="TabBar"</att> attribute to a <elm>div</elm> to initialize it as a TabBar. The TabBar can be positioned anywhere on the page but on this page, we've positioned before <val>Main</val> so that is stays fixed when the page is scrolling.</p>
					<figure data-ts="DoxMarkup">
						<script>
							<div data-ts="TabBar" id="mytabbar"></div>
							<main data-ts="Main"></main>
						</script>
					</figure>
					<p>You can get a hold of the TabBar and add tabs with the <code>tabs()</code> method.</p>
					<figure data-ts="DoxScript" class="attention">
						<script type="runnable">
							var tabbar = ts.ui.get('#mytabbar'); // or pass an element
							tabbar.tabs([
								{
									label: "Tab One",
									onselect : function() {
										ts.ui.Notification.success(this.label + ' selected');
									}
								},
								{
									label: "Tab Two",
									onselect : function() {
										ts.ui.Notification.success(this.label + ' selected');
									}
								}
							]);
						</script>
					</figure>
					<p>Tabs don't do anything by default, you will need to implement a panel switching mechanism using the <code>onselect</code> callback as shown above. You can push new tabs to the <code>tabs</code> collection much like an array.</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							var tabs = ts.ui.get('#mytabbar').tabs();
							tabs.push ({
								label: "Bonus Tab " + (tabs.length + 1),
								onselect : function() {
									ts.ui.Notification.success(this.label);
								}
							});
						</script>
					</figure>
					<p>You can use array methods like <code>push</code>, <code>pop</code>, <code>shift</code>, <code>unshift</code>, <code>splice</code>, <code>reverse</code> and so on to manage tabs, just note that the tabs <code>length</code> is readonly.</p>
					<h3>Selecting tabs</h3>
					<p>We can select Tab Two using one of these approaches:</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							var tabbar = ts.ui.get('#mytabbar');
							tabbar.tabs()[1].select();
						</script>
					</figure>
					<figure data-ts="DoxScript">
						<script type="runnable">
							ts.ui.get('#mytabbar').tabs().selectedIndex = 1;
						</script>
					</figure>

					<p>You can always change what happens when a tab gets selected.</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							var tabs = ts.ui.get('#mytabbar').tabs();
							tabs[0].label = 'Choose Me!';
							tabs[0].onselect = function() {
								ts.ui.Notification.success('Thanks!');
							};
						</script>
					</figure>

					<h3>Querying tabs</h3>
					<p>This will all become a lot easier if you give the tabs an <code>id</code> and use <code>tabs.get()</code></p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							var tabs = ts.ui.get('#mytabbar').tabs();
							tabs.splice(2, 0, {
								label: 'Tab Three',
								id: 'example-tab'
							});
							tabs.get('example-tab').select();
						</script>
					</figure>

					<h3>Tab with icon</h3>
					<p>You can add a tab with an <a data-ts="Button" href="/#components/icons/css.html">icon</a> if somehow that tab is special.</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							ts.ui.get('#mytabbar').tabs().push ({
								label: "Icon Tab",
								icon: "ts-icon-todo"
							});
						</script>
					</figure>
					
					<p>You can also generate <a data-ts="Button" href="/#components/tabbar/html.html">simple tabs</a> using HTML instead of JavaScript.</p>
					
				</section>
			</article>
		</main>
	</body>
</html>
