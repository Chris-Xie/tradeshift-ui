<!DOCTYPE html>
<html>
	<head>
		<title>Aside HTML</title>
		<script src="tabs.js"></script>
		<script>
			function toggle(/*...selectors*/) {
				Array.forEach(arguments, function(selector) {
					ts.ui.get(selector).toggle();
				});
			}
		</script>
	</head>
	<body>
		<header data-ts="TopBar"></header>
		<main data-ts="Main">
			<article>
				<h1>Aside</h1>
				<section class="desc">
					<p>Side-panel used for small user interactions, such as selecting a date.</p>
				</section>
				<section>
					<p>The <val>Aside</val> component <em>must</em> be created with a child component <val>Panel</val>.</p>
					<figure data-ts="DoxMarkup">
						<script>
							<aside data-ts="Aside">
								<div data-ts="Panel">
									<p>Aside content.</p>
								</div>
							</aside>
						</script>
					</figure>
					<p>You can create the <val>Aside</val> wherever you like, just make sure that it's positioned outside of the <val>Main</val> element when it opens.</p>
					<figure data-ts="DoxMarkup">
						<script>
							<main data-ts="Main">
								<p>Main content.</p>
							</main>
							<aside data-ts="Aside">
								<div data-ts="Panel">
									<p>Aside content.</p>
								</div>
							</aside>
						</script>
					</figure>
				</section>

				<h3>Adding a header</h3>
				<section>
					<p>The <att>data-ts.title</att> attribute configures the aside with a <a data-ts="Button" onclick="toggle('#myaside');">nice header</a>.</p>
					<figure data-ts="DoxMarkup">
						<script>
							<aside data-ts="Aside" data-ts.title="Aside Header">
								<div data-ts="Panel">
									<p>Aside content.</p>
								</div>
							</aside>
						</script>
					</figure>
					<p>You can color the header by assigning any of the classnames
						<code class="attr-value">ts-bg-blue</code>,
						<code class="attr-value">ts-bg-green</code>,
						<code class="attr-value">ts-bg-red</code> and
						<code class="attr-value">ts-bg-purple</code>
						to the <code class="el">aside</code> element itself.</p>
					<figure data-ts="DoxMarkup">
						<script>
							<aside data-ts="Aside" class="ts-bg-red">
								<div data-ts="Panel"></div>
							</aside>
						</script>
					</figure>
				</section>

				<h3>Opening the aside</h3>
				<section>
					<p>The <att>data-ts.open</att> attribute can be flipped to toggle the aside.</p>
					<figure data-ts="DoxMarkup">
						<script>
							<aside data-ts="Aside" data-ts.open="false" id="myaside">
								<div data-ts="Panel">
									<p>Aside content.</p>
								</div>
							</aside>
						</script>
					</figure>
					<p>Let's try that with jQuery.</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							$('#myaside').attr('data-ts.open', true);
						</script>
					</figure>
				</section>

				<h3>Show the spinner</h3>
				<section>
					<p>The <att>data-ts.busy</att> attribute can be set to show the spinner</p>
					<figure data-ts="DoxMarkup">
						<script>
							<aside data-ts="Aside" data-ts.busy="Busy message!">
								<div data-ts="Panel">
									<p>Aside content.</p>
								</div>
							</aside>
						</script>
					</figure>
				</section>
				<section>
					<p>Let's try that with jQuery.</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							var aside = $("#myaside");
							aside.attr('data-ts.busy', 'Loading');
							aside.attr('data-ts.open', true);
							setTimeout(function() {
								aside.attr('data-ts.busy', '');
								setTimeout(function() {
									aside.attr('data-ts.open', false);
								}, 500);
							}, 1500);
						</script>
					</figure>
				</section>

				<h3>Tracking the state</h3>
				<section>
					<p>You can setup inline callbacks to be invoked when the aside changes state using one of <code class="attr-name">onopen</code>, 
						<code class="attr-name">onopened</code>, 
						<code class="attr-name">onclose</code> and 
						<code class="attr-name">onclosed</code>. 
						You can also do this with <a data-ts="Button" href="/#components/asides/js.html">event listeners</a> if you like.
					</p>
					<figure data-ts="DoxMarkup">
						<script>
							<aside data-ts="Aside"
								ts.onopen="console.log('Will open')"
								ts.onopened="console.log('Did open')"
								ts.onclose="console.log('Will close')"
								ts.onclosed="console.log('Did close')">
								<div data-ts="Panel">
									<p>Aside content.</p>
								</div>
							</aside>
						</script>
					</figure>
				</section>

				<h3>Stacking asides</h3>
				<section>
					<p>Asides will automatically stack themselves whenever <a data-ts="Button" onclick="toggle('#one')">new asides open</a>.</p>
					<ul>
						<li>The old asides will slide elegantly to the right</li>
						<li>The new aside will float the top of the z-index</li>
					</ul>
				</section>
			</article>
		</main>


		<!-- asides  -->

		<aside data-ts="Aside" id="myaside" data-ts.title="Aside Title">
			<div data-ts="Panel">
				<!--
				<p>
					<button data-ts="Button" data-ts.type="ts-action-close" class="ts-primary">
						<span>Close the Aside</span>
					</button>
				</p>
				-->
			</footer>
		</aside>

		<aside data-ts="Aside" id="one" data-ts.open="false" data-ts.title="Aside One" class="ts-bg-red">
			<div data-ts="Panel">
				<p>
					<button data-ts="Button" onclick="toggle('#two')" class="ts-tertiary">
						<span>Open next aside</span>
					</button>
				</p>
			</div>
		</aside>

		<aside data-ts="Aside" id="two" data-ts.open="false" data-ts.title="Aside Two" class="ts-bg-purple">
			<div data-ts="Panel">
				<p>
					<button data-ts="Button" onclick="toggle('#three')" class="ts-tertiary">
						<span>Open next aside</span>
					</button>
				</p>
			</div>
		</aside>

		<aside data-ts="Aside" id="three" data-ts.open="false" data-ts.title="Aside Three" class="ts-bg-green">
			<div data-ts="Panel">
				<p>
					<button data-ts="Button" onclick="toggle('#one', '#two', '#three')" class="ts-primary">
						<span>Thanks, now close them</span>
					</button>
				</p>
			</div>
		</aside>

	</body>
</html>
