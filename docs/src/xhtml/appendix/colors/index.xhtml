<!DOCTYPE html>
<html>
	<head>
		<title>Colors</title>
		<link rel="stylesheet" href="index.less"/>
	</head>
	<body class="nosticky">
		<article class="doc-colors-article">
			<div id="doc-colors-demo" data-ts="Spirit">
				<div data-ts="Board" id="docs-colors">
					<div data-ts="Panel">
						<script type="text/edbml">

						var cssClasses = getColorClasses();
						for (var colorClass in cssClasses) {
							<div class="docs-color ${cssClasses[colorClass].selector.replace('.','')}" value="" rgbValue="${cssClasses[colorClass].rgbValue}" hexValue="${cssClasses[colorClass].hexValue}">${cssClasses[colorClass].selector.replace('.docs-', '' )} <br>${cssClasses[colorClass].rgbValue}</div>
						}

						// Add 2 tabs (rgb and hex)
						ts.ui.ready(function rendercolors() {
						  var tableCells = document.getElementsByClassName("docs-color");
						  ts.ui.get('#docs-colors', function (board) {
						    board.tabs([
						    { label: 'RGB', onselect: function(){
						        for(var i = 0; i < tableCells.length; i++){
						          tableCells[i].setAttribute("value", tableCells[i].getAttribute("rgbValue"));
						          tableCells[i].innerHTML = cssClasses[i].selector.replace('.docs-', '' ) + "<br>" + cssClasses[i].rgbValue;
						        }
						      }
						    },
						    { label: 'HEX', onselect: function(){
						        for(var i = 0; i < tableCells.length; i++){
						          tableCells[i].setAttribute("value", tableCells[i].getAttribute("hexValue"));
						          tableCells[i].innerHTML = cssClasses[i].selector.replace('.docs-', '' ) + "<br>" + cssClasses[i].hexValue;
						        }
						      }
						    }]);
						  });
						});

						// Copy to click value functionality
						document.getElementById("doc-colors-demo").addEventListener('click', function(e){
							if (e.target.classList.contains("docs-color")) {
									e.stopPropagation();
									var el = document.createElement('input');
									el.value = e.target.getAttribute("value");
									document.body.appendChild(el);
									el.select();
									document.execCommand('copy');
									ts.ui.Notification.success('Copied to clipboard!');
									document.body.removeChild(el);
							}
						});

						// Convert RGB values to HEX
						function rgbToHex(r, g, b) {
							return "#" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
						}

						// Extract color classes (.docs-ts-color-*) from CSS. Generated by .add-classes mixin defined in dox-mixins.less
						function getColorClasses() {
							 var rules = [];
							 for (var i = 0; i < document.styleSheets.length; i++) {
								 var cssRules = [];
								 try{ // to get css rules (imposible for syles on a different domain)
									 document.styleSheets[i].cssRules == 1 ? cssRules = [ document.styleSheets[i].cssRules ] : cssRules = document.styleSheets[i].cssRules;
								 }catch(e){}

								 for(var x = 0; cssRules != null && x < cssRules.length; x++) {
										 if(typeof cssRules[x].selectorText != "undefined" &&
												cssRules[x].selectorText.includes("docs-ts-") &&
												!cssRules[x].selectorText.includes(":after")) {
													 var rgbValues = cssRules[x].style.background.substring(cssRules[x].style.background.lastIndexOf("(") + 1, cssRules[x].style.background.lastIndexOf(")")).split(",");
													 rules.push({
														 "selector": cssRules[x].selectorText,
														 "rgbValue": "rgb("+rgbValues.join(",")+")",
														 "hexValue": rgbToHex(parseInt(rgbValues[0]), parseInt(rgbValues[1]), parseInt(rgbValues[2]))
													 });
										 }
								 }
							 }
							 return rules;
						}

						</script>
					</div>
				</div>
			</div>
		</article>
	</body>
</html>
