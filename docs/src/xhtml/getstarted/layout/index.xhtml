<!DOCTYPE html>
<html>
	<head>
		<title>Layout</title>
	</head>
	<body>
			<article>
				<h1>Layout</h1>
				<section class="desc">
					<p>This is the minimum viable HTML boilerplate for UI components to work out.</p>
				</section>
				<section>
					<p>You may want to tweak the <code>viewport</code> meta tag, but this is a good starting point.</p>
					<figure data-ts="DoxMarkup">
						<script>
							<!DOCTYPE html>
							<html>
								<head>
									<title>Layout</title>
									<meta name="viewport" content="width=device-width"/>
								</head>
								<body>
										<div data-ts="MainContent">
											<h1>Main content</h1>
										</div>
								</body>
							</html>
						</script>
					</figure>

					<h3>TopBar</h3>
					<p>The page should have a <code class="attr-value">TopBar</code> even if you don't plan to use it. That’s because the topbar is always visible in mobile layout, where it functions to toggle the main navigation menu.</p>

					<h3>Main</h3>
					<p>The <code class="attr-value">Main</code> draws the scrollbar now that <code class="el">body</code> overflow is hidden. This setup will let us use absolute position to emulate fixed position, which doesn&apos;t work right inside iframes on mobile devices.</p>

					<h3>MainContent</h3>
					<p>The <code class="attr-value">MainContent</code> element should contain more or less everything your app has to show.</p>

					<h3>Asides</h3>
					<p>If you're using <a data-ts="Button" href="/#components/asides/">Asides</a>, it’s important to place them outside <code class="attr-value">Main</code> like this:</p>
					<figure data-ts="DoxMarkup">
						<script>
								<h1>Main content</h1>
							<aside ts-aside>
								<div ts-panel>
									<p>Aside content</p>
								</div>
							</aside>
						</script>
					</figure>
					<p>With this in mind, you are ready to <a data-ts="Button" href="/#getstarted/usage/">start using components</a>.</p>
				</section>
			</article>
	</body>
</html>
