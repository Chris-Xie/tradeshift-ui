<!DOCTYPE html>
<html>
	<head>
		<title>TopBar.tabs</title>
		<style>
			#panel2 {
				display: none;
			}
		</style>
	</head>
	<body>
		<header data-ts="TopBar"></header>
		<main data-ts="Main">
			<article>
				<div id="panel1">
					<h1>TopBar.tabs</h1>
					<section class="desc">
						<p>Provides tabbed navigation for apps. See also <a data-ts="Button" href="/#components/topbar/buttons.html">buttons</a>.</p>
					</section>
					<section>
						<p>Add tabs to the <code>ts.ui.TopBar</code> with the <code>tabs</code> method. This both sets and gets the tabs. If you omit the argument, you'll get the current tabs (jQuery style).</p>
						<figure data-ts="DoxScript" class="attention">
							<script type="runnable">
								ts.ui.TopBar.tabs([
									{
										label: 'Tab One',
										onselect: function() {
											$('#panel1').show();
											$('#panel2').hide();
											scrollTo(0,0);
										}
									},
									{
										label: 'Tab Two',
										onselect : function() {
											$('#panel1').hide();
											$('#panel2').show();
											scrollTo(0,0);
										}
									}
								]);
							</script>
						</figure>
						<p>Tabs don't do anything by default, you will need to implement a panel switching mechanism using the <code>onselect</code> callback as shown above. You can push new tabs to the <code>tabs</code> collection much like an array.</p>
						<figure data-ts="DoxScript">
							<script type="runnable">
								var tabs = ts.ui.TopBar.tabs();
								tabs.push ({
									label: "Bonus Tab " + (tabs.length + 1),
									onselect : function() {
										ts.ui.Notification.success(this.label);
									}
								});
							</script>
						</figure>
						<p>You can use array methods like <code>push</code>, <code>pop</code>, <code>shift</code>, <code>unshift</code>, <code>splice</code>, <code>reverse</code> and so on to manage tabs, just note that the tabs <code>length</code> is a readonly property.</p>
						
						<h3>Selecting tabs</h3>
						<p>We can select Tab Two using one of these approaches:</p>
						<figure data-ts="DoxScript">
							<script type="runnable">
								ts.ui.TopBar.tabs()[1].select();
							</script>
						</figure>
						<figure data-ts="DoxScript">
							<script type="runnable">
								ts.ui.TopBar.tabs().selectedIndex = 1;
							</script>
						</figure>

						<p>You can always change what happens when a tab gets selected.</p>
						<figure data-ts="DoxScript">
							<script type="runnable">
								var tabs = ts.ui.TopBar.tabs();
								tabs[1].label = 'Choose Me!';
								tabs[1].onselect = function() {
									ts.ui.Notification.success('Thanks!');
								};
							</script>
						</figure>

						<h3>Querying tabs</h3>
						<p>This will all become a lot easier if you give the tabs an <code>id</code> and use <code>tabs.get()</code></p>
						<figure data-ts="DoxScript">
							<script type="runnable">
								var tabs = ts.ui.TopBar.tabs();
								tabs.splice(2, 0, {
									label: 'Tab Three',
									id: 'example-tab'
								});
								tabs.get('example-tab').select();
							</script>
						</figure>

						<h3>Tab counters</h3>
						<p>You can add a counter to the tabs for whatever reason you like.</p>
						<figure data-ts="DoxScript">
							<script type="runnable">
								ts.ui.TopBar.tabs().forEach(function(tab){
									tab.counter = Math.ceil(Math.random() * 10);
								});
							</script>
						</figure>
						<p>When the counter reaches zero, it disappears.</p>
						<figure data-ts="DoxScript">
							<script type="runnable">
								ts.ui.TopBar.tabs().forEach(function(tab){
									tab.counter --;
								});
							</script>
						</figure>

						<h3>Closeable tab</h3>
						<p>You can create closeable tabs, but note that the tab must be selected before it can be closed. You can <code>return false</code> in the <code>onclose</code> method to prevent the tab from closing (if this would otherwise cause data loss).</p>
						<figure data-ts="DoxScript">
							<script type="runnable">
								ts.ui.TopBar.tabs().push ({
									label: "Closeable Tab",
									closeable: true,
									onclose : function() {
										ts.ui.Notification.success(this.label + " closed");
									},
								});
							</script>
						</figure>

						<h3>Tab with icon</h3>
						<p>You can add a tab with an <a data-ts="Button" href="/tradeshift.github.io/Client-Docs/app/#/docs/components/icons/css.html">icon</a> if somehow that tab is special.</p>
						<figure data-ts="DoxScript">
							<script type="runnable">
								ts.ui.TopBar.tabs().push ({
									label: "Icon Tab",
									icon: "ts-icon-todo"
								});
							</script>
						</figure>
						
						<p>Here's a summary of the <code>tabs</code> and <code>tab</code> models.</p>
						<table class="api">
							<caption>
								<code>ts.ui.TabCollection</code>
							</caption>
							<tbody>
								<tr>
									<th colspan="3">Instance properties</th>
								</tr>
								<tr>
									<td><code>selectedIndex</code></td>
									<td><code>{number}</code></td>
									<td>Get or set selected index.</td>
								</tr>
								<tr>
									<th colspan="3">Instance methods</th>
								</tr>
								<tr>
									<td><code>get(id)</code></td>
									<td><code>{ts.ui.TabModel}</code></td>
									<td>Get tab by <code>id</code>.</td>
								</td>
							</tbody>
						</table>
						<table class="api">
							<caption>
								<code>ts.ui.TabModel</code>
							</caption>
							<tbody>
								<tr>
									<th colspan="3">Instance properties</th>
								</tr>
								<tr>
									<td><code>id</code></td>
									<td><code>{string}</code></td>
									<td>Optional tab <code>id</code>.</td>
								</tr>
								<tr>
									<td><code>label</code></td>
									<td><code>{string}</code></td>
									<td>The tab label.</td>
								</tr>
								<tr>
									<td><code>icon</code></td>
									<td><code>{string}</code></td>
									<td>The tab icon.</td>
								</tr>
								<tr>
									<td><code>selected</code></td>
									<td><code>{boolean}</code></td>
									<td>Get or set selected status.</td>
								</tr>
								<tr>
									<td><code>closeable</code></td>
									<td><code>{boolean}</code></td>
									<td>Get or set closeable status.</td>
								</tr>
								<tr>
									<th colspan="3">Instance methods.</th>
								</tr>
								<tr>
									<td><code>select</code></td>
									<td><code>{void}</code></td>
									<td>Select the tab. This will unselect that other tab.</td>
								</tr>
								<tr>
									<td><code>onselect</code></td>
									<td><code>{void}</code></td>
									<td>Called whenever the tab get's selected.</td>
								</tr>
								<tr>
									<td><code>onclose</code></td>
									<td><code>{void}</code></td>
									<td>Called whenever the tab get's closed.</td>
								</tr>
							</tbody>
						</table>
					</section>
				</div>
				<div id="panel2">
					<h1>Panel Two</h1>
					<p>You can go back to the first tab using one of these approaches:</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							ts.ui.TopBar.tabs()[0].select();
						</script>
					</figure>
					<figure data-ts="DoxScript">
						<script type="runnable">
							ts.ui.TopBar.tabs().selectedIndex = 0;
						</script>
					</figure>
				</div>
			</article>
		</main>
	</body>
</html>
