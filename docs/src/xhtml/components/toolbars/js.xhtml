<!DOCTYPE html>
<html>
	<head>
		<title>ToolBar JS</title>
		<script src="tabs.js"></script>
	</head>
	<body>
		<header data-ts="TopBar"></header>
		<main data-ts="Main">
			<article>
				<h1>ToolBar JS</h1>
				<!--
				<nav>
					<li><a href="#title">Title</a></li>
					<li><a href="#search">Search</a></li>
					<li><a href="#buttons">Buttons</a></li>
					<li><a href="#flex">Flex</a></li>
				</nav>
				-->
				<section id="title">
					<p>You can get a hold of the ToolBar with a CSS selector. Use the <code>title</code> method to set the title. You can omit the argument to get the current title, jQuery style.</p>
					<figure data-ts="DoxScript" class="attention">
						<script type="runnable">
							ts.ui.get('#mytoolbar').title('My ToolBar');
							ts.ui.Notification.success('ToolBar is at the bottom of the page.');
						</script>
					</figure>
				</section>

				<section id="search">
					<h3>Search</h3>
					<p>You'll get a dedicated search field by passing an object to the <code>search</code> method. Here, the <code>onsearch</code> callback gets invoked when when the user presses <kbd>ENTER</kbd>.</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							var toolbar = ts.ui.get('#mytoolbar');
							toolbar.search({
								onsearch: function(value) {
									ts.ui.Notification.success(value || 'Search cleared');
								}
							});
						</script>
					</figure>
					<p>The search field expands when the field is focused by the user or whenever there's a non-empty value in the field. You can change the value like this:</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							var search = ts.ui.get('#mytoolbar').search();
							search.value = 'Default Value';
						</script>
					</figure>
					<p>If defined, the <code>onidle</code> method gets called whenever the user pauses typing.</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							var toolbar = ts.ui.get('#mytoolbar');
							toolbar.search({ 
								value: 'Try it now!',
								onidle: function(value) {
									ts.ui.Notification.success(value);
								}
							});
						</script>
					</figure>
					<p>The <code>onidle</code> method is also called when the search field loses focus. The <code>idletime</code> property controls the timeout value, default is <code>500</code> (milliseconds).</p>

					<!--
					<p class="todo">Need to update <code>onidle</code> and <code>onsearch</code> details!</p>
					-->

					<p>Here's an overview of the <code>SearchModel</code>.</p>

					<!-- NOTE: COPY-PASTED FROM TABLES -->

					<table class="api">
						<caption>
							<code>ts.ui.SearchModel</code>
						</caption>
						<tbody>
							<tr>
								<th colspan="3">Instance properties</th>
							</tr>
							<tr>
								<td><code>value</code></td>
								<td><code>{string}</code></td>
								<td>The value of the input field.</td>
							</tr>
							<tr>
								<td><code>flex</code></td>
								<td><code>{number}</code></td>
								<td>Stretch to fill the available space? Just use <code>1</code>.</td>
							</tr>
							<tr>
								<td><code>idletime</code></td>
								<td><code>{number}</code></td>
								<td>Timeout in milliseconds before the user is considered idle.</td>
							</tr>
							<tr>
								<th colspan="3">Instance methods.</th>
							</tr>
							<tr>
								<td><code>onsearch</code></td>
								<td><code>{void}</code></td>
								<td>Called when the user presses <kbd>ENTER</kbd>.</td>
							</tr>
							<tr>
								<td><code>onidle</code></td>
								<td><code>{void}</code></td>
								<td>Called when the user pauses typing.</td>
							</tr>
							<tr>
								<td><code>onfocus</code></td>
								<td><code>{void}</code></td>
								<td>Called when the search field is focused.</td>
							</tr>
							<tr>
								<td><code>onblur</code></td>
								<td><code>{void}</code></td>
								<td>Called when the search field gets blurred.</td>
							</tr>
							<tr>
								<td><code>focus</code></td>
								<td><code>{void}</code></td>
								<td>Focus the search field.</td>
							</tr>
							<tr>
								<td><code>blur</code></td>
								<td><code>{void}</code></td>
								<td>Blur the search field.</td>
							</tr>
						</tbody>
					</table>
				</section>

				<section id="buttons">
					<h3>Buttons</h3>
					<p>
						You can add buttons to the ToolBar. The API resembles that of the  
						<a data-ts="Button" href="/#components/topbar/buttons.html">TopBar</a>.
					</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							var toolbar = ts.ui.get('#mytoolbar');
							toolbar.buttons([{
								label: 'Button',
								type: 'ts-primary',
								onclick: function() {
									ts.ui.Notification.success(this.label);
								}
							}]);
						</script>
					</figure>
					<p>
						You can use array methods like <code>push</code>, <code>pop</code>, 
						<code>shift</code>, <code>unshift</code>, <code>splice</code>, 
						<code>reverse</code> and so on to manage buttons. Just note that the 
						buttons <code>length</code> is readonly.
					</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							var buttons = ts.ui.get('#mytoolbar').buttons();
							buttons.push({
								label: 'Button',
								type: 'ts-secondary'
							});
						</script>
					</figure>
					<div data-ts="Note">
						<p>Buttons are automatically sorted with primary buttons aligned to the right.</p>
					</div>
					
					<h3>Busy buttons</h3>
					<p>We can display a temporary progress indicator with methods <code>busy</code> and <code>done</code>.</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							var button = ts.ui.get('#mytoolbar').buttons()[0];
							button.busy();
							setTimeout(function() {
								button.done();
							}, 1000);
						</script>
					</figure>
					<p>The <code>busy</code> method supports an optional status message.</p>					
					<figure data-ts="DoxScript">
						<script type="runnable">
							var button = ts.ui.get('#mytoolbar').buttons()[0];
							button.busy('Making progress');
							setTimeout(function() {
								button.done();
							}, 1000);
						</script>
					</figure>
					
					<h3>Button groups</h3>
					<p>You can also <em>group buttons in arrays</em> to create button groups that look like this:</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							var toolbar = ts.ui.get('#mytoolbar');
							toolbar.buttons([
								{ label: 'Normal'},
								{ label: 'Normal'},
								[
									{ label: 'Accept', type: 'ts-primary' },
									{ label: 'Reject', type: 'ts-danger' }	
								]
							]);
						</script>
					</figure>
					<p>You can of course also create buttons with icons instead of text.</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							var group = ts.ui.get('#mytoolbar').buttons()[2];
							group.push({
								icon: 'ts-icon-other',
								type: 'ts-secondary'
							});
						</script>
					</figure>
					
					<h3>Hide buttons</h3>
					<p>You can <code>hide()</code> and <code>show()</code> buttons. You can also toggle <code>visible</code>. The code in this example accounts for buttons nested inside groups, but you can also call these methods directly on the groups to toggle all the members.</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							var buttons = ts.ui.get('#mytoolbar').buttons();
							function toggle(button_or_group) {
								var x = button_or_group;
								if(x.length) {
									x.forEach(toggle);
								} else {
									if(x.visible) {
										x.hide();
									} else {
										x.show();
									}
								}
							}
							buttons.forEach(toggle);
						</script>
					</figure>
					
					<h3>Disable buttons</h3>
					<p>You can <code>disable()</code> and <code>enable()</code> buttons. You can also toggle <code>disabled</code>.</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							var buttons = ts.ui.get('#mytoolbar').buttons();
							buttons.forEach(function(button_or_group) {
								var x = button_or_group;
								if(x.disabled) {
									x.enable();
								} else {
									x.disable();
								}
							});
						</script>
					</figure>
					<p>Here's an overview of the <code>ButtonModel</code>.</p>
					<div data-ts="DoxApi">
						<script type="application/json">
							{
								name: "ts.ui.ButtonModel",
								properties: [
									{
										name: "id",
										type: "string",
										desc: "Optional button `id`."
									},
									{
										name: "label",
										type: "string",
										desc: "The buttons label."
									},
									{
										name: "icon",
										type: "string",
										desc: 'The button icon (label must be `null` or empty).'
									},
									{
										name: "info",
										type: "string",
										desc: "The button tooltip (hover text)."
									},
									{
										name: "visible",
										type: "boolean",
										desc: "Button is visible?"
									},
									{
										name: "disabled",
										type: "boolean",
										desc: "Button is disabled?"
									}
								],
								methods: [
									{
										name: "onclick",
										desc: "Called whenever the button gets clicked."
									},
									{
										name: "busy",
										args: "(string)",
										desc: "Mark button busy with optional message."
									},
									{
										name: "done",
										desc: "Mark the button done (not busy)."
									},
									{
										name: "hide",
										desc: "Hide the button."
									},
									{
										name: "show",
										desc: "Show the button."
									},
									{
										name: "disable",
										desc: "Disable the button."
									},
									{
										name: "enable",
										desc: "Enable the button."
									}
								]
							}
						</script>
					</div>
				</section>
				<section id="flex">
					<h3>Flex</h3>
					<p>You can <em>flex</em> any button to make it fill the available width of the ToolBar.</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							var toolbar = ts.ui.get('#mytoolbar');
							toolbar.buttons([
								{ label: 'No Flex', type: 'ts-secondary' },
								{ label: 'No Flex', type: 'ts-secondary'},
								{ label: 'Flex All The Way', type: 'ts-primary', flex: 1}
							]);
						</script>
					</figure>
					<p>You can also flex the search field. In that case, it will remain expanded even when there's no default <code>value</code>. When multiple items are flexed, their widths will be distributed evenly.</p>
					<figure data-ts="DoxScript">
						<script type="runnable">
							var toolbar = ts.ui.get('#mytoolbar');
							toolbar.search({
								flex: 1
							});
						</script>
					</figure>
					<p>In the future, we may provide an alternative distribution scheme. That's why we use a number instead of a boolean, but you should always use <samp>1</samp> for now.</p>
				</section>
			</article>
		</main>
		<footer data-ts="ToolBar" id="mytoolbar"></footer>
	</body>
</html>
