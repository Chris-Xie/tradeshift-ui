<!DOCTYPE html>
<html>
	<head>
		<title>Search</title>
	</head>
	<body>
			<article>
				<h1>Search</h1>
				<section class="desc">
					<p>The Search is prominently featured in the <a data-ts="Button" href="/#components/header/">Header</a>, but you can use it anywhere on the page if you like. Note that the API is in any case identical.</p>
				</section>
				<section>
					<p>You can initialize a Search with <att>data-ts="Search"</att>. The classname <val>ts-inset</val> will add an outline (so that we can see how it behaves on this white background).</p>
					<figure data-ts="DoxMarkup">
						<output/>
						<script>
							<div data-ts="Search" id="mysearch" class="ts-inset"></div>
						</script>
					</figure>
					<figure data-ts="DoxScript">
						<script type="runnable">
							ts.ui.get('#mysearch', search => {
								search.value = 'Press ENTER here';
								search.info = 'Search amongst all the things';
								search.onsearch = function(value) {
									ts.ui.Notification.success(value || 'Search cleared');
								}
							});
						</script>
					</figure>
				</section>
				<p>To keep the field expanded at all times, simply assign the CSS classname <code>ts-expanded</code>.</p>
				<section>
					<h3>Search info</h3>
					<p>The <code>data-ts.info</code> attribute works to show a <code>title</code> (mouseover tooltip) when the field is collapsed and a <code>placeholder</code> when the field is expanded.
					<figure data-ts="DoxMarkup">
						<script>
							<div data-ts="Search" class="ts-inset"
								data-ts.info="Search amongst the things"></div>
						</script>
						<output/>
					</figure>
				</section>
				<section>
					<object data="../bars/toolbar.xhtml#search-methods"></object>
				</section>
				<section>
					<object data="../bars/toolbar.xhtml#search-api">
						<replace input="ts.ui.SearchModel" output="ts.ui.SearchSpirit"/>
						<replace input="Search model" output="Search component"/>
					</object>
				</section>
			</article>
	</body>
</html>
